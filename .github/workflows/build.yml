name: Build Kernel

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup packages
        run: |
          sudo apt-get update -y
          sudo apt-get -y install repo bc bison build-essential curl ccache coreutils flex g++-multilib gcc-multilib git gnupg \
          gperf libxml2 lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev imagemagick lunzip lzop schedtool squashfs-tools xsltproc zip \
          zlib1g-dev perl xmlstarlet virtualenv xz-utils rr jq libncurses5 pngcrush lib32ncurses5-dev git-lfs libxml2 openjdk-11-jdk wget lib32readline-dev \
          libssl-dev libxml2-utils android-sdk-libsparse-utils lld zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
          lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig ca-certificates bc cpio imagemagick \
          bsdmainutils lz4 aria2 rclone ssh-client libncurses5 libssl-dev rsync schedtool python-is-python3 libarchive-tools python3 zstd

      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Clone kernel repo
        run: |
          git clone https://github.com/Burhanverse/kerneltree.git -b 14 --depth=500 kernel
          cd kernel 
          sed -i 's/^CONFIG_LOCALVERSION=".*"/CONFIG_LOCALVERSION="-BlackSapphire"/' arch/arm64/configs/lancelot_defconfig

      - name: Build
        run: |
          cd kernel
          wget https://raw.githubusercontent.com/Burhanverse/build-kernel-circleci/master/config.env
          wget https://raw.githubusercontent.com/Burhanverse/build-kernel-circleci/master/kranul-build.sh && chmod +x ./kranul-build.sh
          echo "Building kernel"
          ./kranul-build.sh

      - name: Upload kernel zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel_fastboot
          path: kernel/builds/*.zip

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: kernel/builds/*.zip
          tag: "v1.0.0"
          name: "Release v1.0.0"
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Download pdup
        run: |
          cd kernel
          wget https://raw.githubusercontent.com/As9124k82134/pdup/master/pdup && chmod +x pdup
          OUTPUT=$(./pdup builds/*.zip)
          echo "$OUTPUT" > pdup_output.txt
          echo "$OUTPUT"
          URL=$(echo "$OUTPUT" | grep -o 'http[s]\?://[^ ]\+')
          FILENAME=$(echo "$OUTPUT" | grep -o 'Uploading \[.*\].zip' | sed 's/Uploading \[\(.*\)\].zip/\1.zip/')
          echo "URL=$URL" >> $GITHUB_ENV
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV

      - name: Download file from URL
        run: |
          wget -O ${{ env.FILENAME }} ${{ env.URL }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: 'v1.0.0'  # Change this to your versioning strategy
          release_name: 'Release v1.0.0'
          body: 'Release with asset from URL'
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILENAME }}
          asset_name: ${{ env.FILENAME }}
          asset_content_type: application/zip
