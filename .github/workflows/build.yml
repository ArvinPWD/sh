name: Build Kernel

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
         
      - name: Setup packages
        run: |
          sudo apt-get update 
          sudo apt-get install repo bc bison build-essential curl ccache coreutils flex g++-multilib gcc-multilib git gnupg \
          gperf libxml2 lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev imagemagick lunzip lzop schedtool squashfs-tools xsltproc zip \
          zlib1g-dev perl xmlstarlet virtualenv xz-utils rr jq libncurses5 pngcrush lib32ncurses5-dev git-lfs libxml2 openjdk-11-jdk wget lib32readline-dev \
          libssl-dev libxml2-utils android-sdk-libsparse-utils lld zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
          lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig ca-certificates bc cpio imagemagick \
          bsdmainutils lz4 aria2 rclone ssh-client libncurses5 libssl-dev rsync schedtool python-is-python3 libarchive-tools python3 zstd

      - name: Setup ccache
        run: |
          mkdir ccache
          sudo mkdir /mnt/ccache
          sudo mount --bind ccache /mnt/ccache
          echo 'export USE_CCACHE=1' >> $HOME/.bashrc
          echo 'export CCACHE_DIR=/mnt/ccache' >> $HOME/.bashrc
          echo 'export CCACHE_EXEC=$(which ccache)' >> $HOME/.bashrc
          source $HOME/.bashrc
          ccache -o compression=true
          ccache -M 20G
          ccache -z

      - name: Clone kernel repo
        run: |
          git clone https://github.com/Burhanverse/kerneltree.git -b 14 --depth=500 kernel
          cd kernel 
          sed -i 's/^CONFIG_LOCALVERSION=".*"/CONFIG_LOCALVERSION="-BlackSapphire"/' arch/arm64/configs/lancelot_defconfig

      - name: Build
        run: |
          cd kernel
          wget https://raw.githubusercontent.com/Burhanverse/build-kernel-circleci/master/config.env
          wget https://raw.githubusercontent.com/Burhanverse/build-kernel-circleci/master/kranul-build.sh && chmod +x ./kranul-build.sh
          echo "Building kernel"
          ./kranul-build.sh

      - name: Upload
        run: |
          cd kernel
          wget https://raw.githubusercontent.com/As9124k82134/pdup/master/pdup && chmod +x pdup
          ./pdup builds/*.zip
